Q1.
#include<stdio.h>
int n;
main()
{
int seq[30],fr[5],pos[5],find,flag,max,i,j,m,k,t,s;
int count=1,pf=0,p=0;
float pfr;
printf("Enter maximum limit of the sequence: ");
scanf("%d",&max);
printf("\nEnter the sequence: ");
 for(i=0;i<max;i++)
scanf("%d",&seq[i]);
 printf("\nEnter no. of frames: ");
 scanf("%d",&n);
fr[0]=seq[0]; 
pf++;
printf("%d\t",fr[0]);
i=1;
while(count<n)
{
flag=1; p++;
for(j=0;j<i;j++)
{
if(seq[i]==seq[j]) flag=0;
}
if(flag!=0)
{
 fr[count]=seq[i];
 printf("%d\t",fr[count]);
 count++;
pf++;

}
i++;
}
  
printf("\n");
for(i=p;i<max;i++)
{
flag=1;
for(j=0;j<n;j++)
{
if(seq[i]==fr[j])
flag=0;
}
if(flag!=0)

{
for(j=0;j<n;j++)
{
m=fr[j];
for(k=i;k<max;k++)
{
if(seq[k]==m)
{
    pos[j]=k;
     break;

 }
else
pos[j]=1;

}
}
for(k=0;k<n;k++)
{
if(pos[k]==1)
flag=0;
}
if(flag!=0)
s=findmax(pos);
 if(flag==0)
{
for(k=0;k<n;k++)
{
if(pos[k]==1)
{
s=k;
 break;
}
}
}
fr[s]=seq[i];
for(k=0;k<n;k++)
printf("%d\t",fr[k]);
pf++;
printf("\n");
}
}
pfr=(float)pf/(float)max;
printf("\nThe no. of page faults are %d",pf);
printf("\nPage fault rate %f",pfr);
}
int findmax(int a[])
{
int max,i,k=0;
max=a[0];
for(i=0;i<n;i++)
{
if(max<a[i])
{
  max=a[i];
   k=i;
}

}

return k;
}













Q2
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

    void
    make_toks(char *s, char *tok[])
{
    int i = 0;
    char *p;

    p = strtok(s, " ");
    while (p != NULL)
    {
        tok[i++] = p;
        p = strtok(NULL, " ");
    }

    tok[i] = NULL;
}

void search(char *fn, char op, char *pattern)
{
    int fh, count = 0, i = 0, j = 0;
    char buff[255], c, *p;

    fh = open(fn, O_RDONLY);
    if (fh == -1)
    {
        printf("File %s Not Found\n", fn);
        return;
    }

    switch (op)
    {
    case 'f':
        while (read(fh, &c, 1))
        {
            buff[j++] = c;
            if (c == '\n')
            {
                buff[j] = '\0';
                j = 0;
                i++;
                if (strstr(buff, pattern))
                {
                    printf("%d: %s", i, buff);
                    break;
                }
            }
        }
        break;
    case 'c':
        while (read(fh, &c, 1))
        {
            buff[j++] = c;
            if (c == '\n')
            {
                buff[j] = '\0';
                j = 0;
                p = buff;
                while (p = strstr(p, pattern))
                {
                    count++;
                    p++;
                }
            }
        }
        printf("Total No.of Occurrences = %d\n", count);
        break;
    case 'a':
        while (read(fh, &c, 1))
        {
            buff[j++] = c;
            if (c == '\n')
            {
                buff[j] = '\0';
                j = 0;
                i++;
                if (strstr(buff, pattern))
                    printf("%d: %s", i, buff);
            }
        }
    } // switch
    close(fh);
} // search

int main()
{
    char buff[80], *args[10];
    int pid;

    while (1)
    {
        printf("myshell$");
        fflush(stdin);
        fgets(buff, 80, stdin);
        buff[strlen(buff) - 1] = '\0';
        make_toks(buff, args);
        if (strcmp(args[0], "search") == 0)
            search(args[3], args[1][0], args[2]);
        else
        {
            pid = fork();
            if (pid > 0)
                wait();
            else
            {
                if (execvp(args[0], args) == -1)
                    printf("Bad command.\n");
            }
        }
    }

    return 0;
}
